// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Remote.Shell.Interrupt.Storehouse.Persistence;

#nullable disable

namespace Remote.Shell.Interrupt.Storehouse.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240910141437_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PortVLAN", b =>
                {
                    b.Property<Guid>("PortsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VLANsOfPortId")
                        .HasColumnType("uuid");

                    b.HasKey("PortsId", "VLANsOfPortId");

                    b.HasIndex("VLANsOfPortId");

                    b.ToTable("PortVLAN");
                });

            modelBuilder.Entity("Remote.Shell.Interrupt.Storehouse.Domain.BusinessLogic.BusinessRule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssignmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Condition")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRoot")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("ParentId");

                    b.ToTable("BusinessRules");
                });

            modelBuilder.Entity("Remote.Shell.Interrupt.Storehouse.Domain.Gateway.NetworkDevice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("GeneralInformation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NetworkDeviceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("NetworkDevices");
                });

            modelBuilder.Entity("Remote.Shell.Interrupt.Storehouse.Domain.InterfacePort.ARPEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MAC")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PortId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PortId");

                    b.ToTable("ARPEntities");
                });

            modelBuilder.Entity("Remote.Shell.Interrupt.Storehouse.Domain.InterfacePort.Port", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InterfaceNumber")
                        .HasColumnType("integer");

                    b.Property<int>("InterfaceStatus")
                        .HasColumnType("integer");

                    b.Property<int>("InterfaceType")
                        .HasColumnType("integer");

                    b.Property<Guid>("NetworkDeviceId")
                        .HasColumnType("uuid");

                    b.Property<string>("PortName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("SpeedOfPort")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("NetworkDeviceId");

                    b.ToTable("Ports");
                });

            modelBuilder.Entity("Remote.Shell.Interrupt.Storehouse.Domain.InterfacePort.TerminatedNetworkEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Netmask")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PortId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PortId");

                    b.ToTable("TerminatedNetworkEntities");
                });

            modelBuilder.Entity("Remote.Shell.Interrupt.Storehouse.Domain.VirtualNetwork.VLAN", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VLANName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("VLANNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("VLANs");
                });

            modelBuilder.Entity("Remote.Shell.Interrupt.Storehouse.Domain.Work.Assignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TargetFieldName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TypeOfRequest")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("PortVLAN", b =>
                {
                    b.HasOne("Remote.Shell.Interrupt.Storehouse.Domain.InterfacePort.Port", null)
                        .WithMany()
                        .HasForeignKey("PortsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Remote.Shell.Interrupt.Storehouse.Domain.VirtualNetwork.VLAN", null)
                        .WithMany()
                        .HasForeignKey("VLANsOfPortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Remote.Shell.Interrupt.Storehouse.Domain.BusinessLogic.BusinessRule", b =>
                {
                    b.HasOne("Remote.Shell.Interrupt.Storehouse.Domain.Work.Assignment", "Assignment")
                        .WithMany()
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Remote.Shell.Interrupt.Storehouse.Domain.BusinessLogic.BusinessRule", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignment");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Remote.Shell.Interrupt.Storehouse.Domain.InterfacePort.ARPEntity", b =>
                {
                    b.HasOne("Remote.Shell.Interrupt.Storehouse.Domain.InterfacePort.Port", "Port")
                        .WithMany("ARPTableOfPort")
                        .HasForeignKey("PortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Port");
                });

            modelBuilder.Entity("Remote.Shell.Interrupt.Storehouse.Domain.InterfacePort.Port", b =>
                {
                    b.HasOne("Remote.Shell.Interrupt.Storehouse.Domain.Gateway.NetworkDevice", "NetworkDevice")
                        .WithMany("PortsOfNetworkDevice")
                        .HasForeignKey("NetworkDeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NetworkDevice");
                });

            modelBuilder.Entity("Remote.Shell.Interrupt.Storehouse.Domain.InterfacePort.TerminatedNetworkEntity", b =>
                {
                    b.HasOne("Remote.Shell.Interrupt.Storehouse.Domain.InterfacePort.Port", "Port")
                        .WithMany("NetworkTableOfPort")
                        .HasForeignKey("PortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Port");
                });

            modelBuilder.Entity("Remote.Shell.Interrupt.Storehouse.Domain.BusinessLogic.BusinessRule", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("Remote.Shell.Interrupt.Storehouse.Domain.Gateway.NetworkDevice", b =>
                {
                    b.Navigation("PortsOfNetworkDevice");
                });

            modelBuilder.Entity("Remote.Shell.Interrupt.Storehouse.Domain.InterfacePort.Port", b =>
                {
                    b.Navigation("ARPTableOfPort");

                    b.Navigation("NetworkTableOfPort");
                });
#pragma warning restore 612, 618
        }
    }
}
